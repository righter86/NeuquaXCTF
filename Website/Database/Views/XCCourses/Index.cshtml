@model IEnumerable<XCCoursesModel>

@{
    ViewData["Title"] = "Courses";
}

<script type="text/javascript">

    // Upgrade button class name
    //$.fn.dataTable.Buttons.defaults.dom.button.className = 'btn btn-white btn-sm';

    $(document).ready(function () {

        $('.dataTables-example').DataTable({
            pageLength: 25,
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'copy' },
                { extend: 'csv' },
                { extend: 'excel', title: 'NVXCTF' },
                { extend: 'pdf', title: 'NVXCTF' },

                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ]
        });
    });


</script>
<div class="animated fadeInUp">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>Courses</h5>
                    <div class="ibox-tools float-right">
                        <a class="btn btn-sm btn-warning">Create</a>
                    </div>
                </div>
                <div class="ibox-content">
                    <table class="table table-striped table-bordered table-hover dataTables-example">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.Name)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.City)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.State)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Distance)
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        @if (Model != null && Model.Count() > 0)
                        {
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.City)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.State)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Distance)
                                        </td>
                                        <td>
                                            <a asp-action="Edit" asp-route-id="@item.CourseId">Edit</a> |
                                            <a asp-action="Details" asp-route-id="@item.CourseId">Details</a> |
                                            <a asp-action="Delete" asp-route-id="@item.CourseId">Delete</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        }                       
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

